import cookie from "js-cookie";
import Vue from "vue";
export const DEFAULT_OPTIONS = {
  breakpoints: {
    desktop: 1024,
    desktopMedium: 1280,
    desktopWide: 1600,
    mobile: 320,
    mobileMedium: 375,
    mobileWide: 425,
    tablet: 768
  },
  cookieName: "viewport",
  defaultBreakpoints: {
    desktop: "desktop",
    mobile: "mobile",
    tablet: "tablet"
  },
  fallbackBreakpoint: "desktop"
};
export async function detectBreakpoint(cookie2, userAgent) {
  try {
    if (cookie2 && cookie2 in this.breakpoints) {
      return cookie2;
    }
    const {default: UAParser} = await import(
      /* webpackChunkName: "ua-parser-js" */
      "ua-parser-js"
    );
    const parser = new UAParser(userAgent);
    const {type: deviceType = ""} = parser.getDevice();
    if (deviceType in this.defaultBreakpoints) {
      return this.defaultBreakpoints[deviceType];
    }
    return this.fallbackBreakpoint;
  } catch (error) {
    console.error(error);
    return this.fallbackBreakpoint;
  }
}
export function useViewport(options, breakpoint) {
  const instance = new Vue({
    data() {
      return {
        breakpoint
      };
    },
    computed: {
      _queries() {
        const {breakpoints = {}} = options;
        const entries = Object.keys(breakpoints).sort((a, b) => breakpoints[a] - breakpoints[b]);
        return entries.reduceRight((acc, ref, index, array) => {
          const size = breakpoints[ref];
          const nextSize = breakpoints[array[index + 1]];
          let mediaQuery = "";
          if (index > 0) {
            mediaQuery = `(min-width: ${size}px)`;
          } else {
            mediaQuery = `(min-width: 1px)`;
          }
          if (nextSize) {
            mediaQuery += ` and (max-width: ${nextSize - 1}px)`;
          }
          acc[ref] = {
            mediaQuery,
            size
          };
          return acc;
        }, {});
      },
      isGreaterThan() {
        const keys = Object.keys(this._queries);
        const currentIndex = keys.indexOf(this.breakpoint);
        return (searchBreakpoint) => {
          const breakpointIndex = keys.indexOf(searchBreakpoint);
          if (breakpointIndex === -1) {
            return false;
          }
          return breakpointIndex > currentIndex;
        };
      },
      isLessThan() {
        const keys = Object.keys(this._queries);
        const currentIndex = keys.indexOf(this.breakpoint);
        return (searchBreakpoint) => {
          const breakpointIndex = keys.indexOf(searchBreakpoint);
          if (breakpointIndex === -1) {
            return false;
          }
          return breakpointIndex < currentIndex;
        };
      },
      match() {
        return (breakpointToMatch) => {
          return this.breakpoint === breakpointToMatch;
        };
      },
      matches() {
        return (...breakpointsToMatch) => {
          return breakpointsToMatch.includes(this.breakpoint);
        };
      }
    },
    watch: {
      _queries: {
        deep: true,
        handler(queries) {
          if (process.server) {
            return;
          }
          const queriesKeys = Object.keys(queries);
          if (!queriesKeys.length) {
            return;
          }
          const mediaQueryLists = queriesKeys.map((key) => window.matchMedia(queries[key].mediaQuery));
          return mediaQueryLists.forEach((mediaQueryList, key) => {
            const newBreakpoint = queriesKeys[key];
            if (mediaQueryList.matches) {
              this._setBreakpoint(newBreakpoint);
            }
            mediaQueryList.addEventListener("change", (event) => {
              if (!event.matches) {
                return;
              }
              this._setBreakpoint(newBreakpoint);
            });
          });
        },
        immediate: true
      }
    },
    methods: {
      _setBreakpoint(breakpoint2) {
        this.breakpoint = breakpoint2;
        cookie.set(options.cookieName, breakpoint2, {
          expires: 365,
          sameSite: "strict"
        });
      }
    }
  });
  return instance;
}
